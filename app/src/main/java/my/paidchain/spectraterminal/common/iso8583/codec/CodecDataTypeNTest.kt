package my.paidchain.spectraterminal.common.iso8583.codec

import org.junit.Assert
import org.junit.Test
import my.paidchain.spectraterminal.common.Misc.Companion.hexStringToByteArray
import my.paidchain.spectraterminal.common.iso8583.FieldConfig
import my.paidchain.spectraterminal.common.iso8583.DataType
import my.paidchain.spectraterminal.common.iso8583.LengthType
import my.paidchain.spectraterminal.common.iso8583.Alignment

@Suppress("FunctionName")
class CodecDataTypeNTest {
    @Test
    fun Should_be_able_to_pack_data() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.RIGHT,
            maxLength = 6,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val result = codec.pack("123456", config)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertArrayEquals(result, "123456".hexStringToByteArray())
    }

    @Test
    fun Should_be_able_to_pack_data_with_left_alignment() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.LEFT,
            maxLength = 6,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val result = codec.pack("12345", config)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertArrayEquals(result, "123450".hexStringToByteArray())
    }

    @Test
    fun Should_be_able_to_pack_data_with_right_alignment() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.RIGHT,
            maxLength = 6,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val result = codec.pack("12345", config)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertArrayEquals(result, "012345".hexStringToByteArray())
    }

    @Test
    fun Should_be_able_to_unpack_data() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.RIGHT,
            maxLength = 6,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val data = "012345".hexStringToByteArray()
        val result = codec.unpack(data, data.size * 2, config)

//        println(result)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertEquals(result, "012345")
    }

    @Test
    fun Should_be_able_to_unpack_data_with_mask_nibble() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.RIGHT,
            maxLength = 6,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val data = "123456".hexStringToByteArray()
        val result = codec.unpack(data, data.size * 2, config)

//        println(result)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertEquals(result, "123456")
    }

    @Test
    fun Should_be_able_to_unpack_data_with_left_alignment() {
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.LEFT,
            maxLength = 5,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val data = "123450".hexStringToByteArray()
        val result = codec.unpack(data, data.size * 2, config)

//        println(result)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertEquals(result, "12345")
    }

    @Test
    fun Should_be_able_to_unpack_data_with_right_alignment(){
        val config = FieldConfig(
            bitNo = 0,
            name = "",
            dataType = DataType.N,
            lengthType = LengthType.FIX,
            alignment = Alignment.RIGHT,
            maxLength = 5,
            padding = byteArrayOf(0x00)
        )

        val codec = CodecDataTypeN()
        val data = "012345".hexStringToByteArray()
        val result = codec.unpack(data, data.size * 2, config)

//        println(result)

        Assert.assertTrue(codec is CodecDataTypeN)
        Assert.assertEquals(result, "12345")
    }
}
